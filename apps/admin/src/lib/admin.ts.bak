import { Actor, HttpAgent } from '@dfinity/agent';
import { Principal } from '@dfinity/principal';
import { AuthClient } from '@dfinity/auth-client';
import { idlFactory } from './admin.did';
import { getScrapedData as getScrapedDataDirect } from './storage-http-client';
import { ScrapedData, Result } from './types';

// Admin canister ID
const ADMIN_CANISTER_ID = 'sxsvc-aqaaa-aaaaj-az4ta-cai';

let authClient: AuthClient;
let adminActor: any;
let identity: any;

export async function initAuthClient(): Promise<void> {
  console.log('Creating new auth client...');
  authClient = await AuthClient.create();
  console.log('Auth client created');
  
  if (await authClient.isAuthenticated()) {
    identity = authClient.getIdentity();
    console.log('Got identity:', identity.getPrincipal().toString());
    createActor();
  }
}

export function createActor(): void {
  const agent = new HttpAgent({
    host: 'https://ic0.app',
    identity,
  });
  
  adminActor = Actor.createActor(idlFactory, {
    agent,
    canisterId: ADMIN_CANISTER_ID,
  });
  
  console.log('Admin actor methods:', Object.keys(adminActor));
}

export async function getScrapedData(topicId: string | null): Promise<Result<ScrapedData[]>> {
  console.log('[admin.ts] getScrapedData called with topicId:', topicId);
  
  try {
    console.log('[admin.ts] Attempting direct storage access first');
    console.log('[admin.ts] getScrapedDataDirect called with topicId:', topicId);
    
    const data = await getScrapedDataDirect(topicId || undefined);
    console.log('[admin.ts] Successfully retrieved', data.length, 'items directly from storage via HTTP API');
    
    return { ok: data };
  } catch (directError) {
    console.error('[admin.ts] Error retrieving data directly from storage:', directError);
    
    try {
      console.log('[admin.ts] Falling back to admin canister');
      const result = await adminActor.getScrapedData(topicId ? [topicId] : []);
      console.log('[admin.ts] Admin canister result:', result);
      
      return result;
    } catch (adminError) {
      console.error('[admin.ts] Error retrieving data from admin canister:', adminError);
      return { err: 'Failed to retrieve data: ' + adminError.message };
    }
  }
}
