type Storage = 
 service {
   createTopic: (ScrapingTopic) -> (Result_2);
   deleteTopic: (text) -> (Result_2);
   extract: (ExtractionRequest) -> (Result_1);
   getBySource: (text) -> (vec ScrapedData) query;
   getContent: (text) -> (Result_5) query;
   getContentBySource: (text) -> (Result_4) query;
   getContentByTopic: (text, nat) -> (Result_4) query;
   getNextPendingUrl: () -> (opt record {
                                   id: text;
                                   url: text;
                                 });
   getScrapedData: (vec text) -> (vec ScrapedData) query;
   getTopic: (text) -> (opt ScrapingTopic) query;
   getTopics: () -> (vec ScrapingTopic) query;
   processWithAI: (Request) -> (Result_3);
   queueUrlForProcessing: (text, text) -> (Result_2);
   setTopicActive: (text, bool) -> (Result_2);
   storeContent: (ScrapedContent) -> (Result_2);
   storeHtmlContent: (text, text) -> ();
   storeRequest: (Request) -> (Result_2);
   testExtraction: (ExtractionRequest) -> (Result_1);
   testExtractionLocal:
    (record {
       extraction_rules: ExtractionRules;
       htmlContent: text;
     }) -> (Result);
   testLocalExtraction:
    (record {
       extraction_rules: ExtractionRules;
       htmlContent: text;
     }) -> (Result);
 };
type ScrapingTopic = 
 record {
   active: bool;
   createdAt: int;
   description: text;
   extractionRules: ExtractionRules;
   id: text;
   name: text;
   rateLimit: opt record {
                    maxConcurrent: nat;
                    requestsPerHour: nat;
                  };
   urlPatterns: vec text;
 };
type ScrapingField = 
 record {
   aiPrompt: text;
   fieldType: text;
   name: text;
   required: bool;
 };
type ScrapedData = 
 record {
   client_id: principal;
   content: text;
   id: text;
   source: text;
   timestamp: int;
   topic: text;
   url: text;
 };
type ScrapedContent = 
 record {
   ai_analysis:
    record {
      code_snippets: vec record {
                           code: text;
                           language: text;
                         };
      key_points: vec text;
      relevance_score: nat;
    };
   author: text;
   content: text;
   engagement:
    record {
      claps: opt nat;
      comments: nat;
      reactions: opt nat;
      stars: opt nat;
    };
   id: text;
   metadata:
    record {
      language: opt text;
      license: opt text;
      reading_time: opt nat;
      tech_stack: vec text;
    };
   publish_date: int;
   source: text;
   summary: text;
   title: text;
   topics: vec text;
   update_date: int;
   url: text;
 };
type Result_5 = 
 variant {
   err: text;
   ok: ScrapedContent;
 };
type Result_4 = 
 variant {
   err: text;
   ok: vec ScrapedContent;
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec record {
             text;
             text;
           };
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: ExtractionResult;
 };
type Result = 
 variant {
   err: text;
   ok: record {data: vec record {
                           text;
                           text;
                         };};
 };
type Request = 
 record {
   content_id: text;
   extraction_rules: ExtractionRules;
   id: text;
   timestamp: int;
   topic_id: text;
   url: text;
 };
type ExtractionRules = 
 record {
   customPrompt: opt text;
   fields: vec ScrapingField;
 };
type ExtractionResult = 
 record {
   data: vec record {
               text;
               text;
             };
   timestamp: int;
   url: text;
 };
type ExtractionRequest = 
 record {
   extractionRules: ExtractionRules;
   url: text;
 };
service : () -> Storage
