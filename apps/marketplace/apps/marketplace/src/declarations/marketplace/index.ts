// This file will be generated by dfx generate command
// Placeholder for development

export const idlFactory = ({ IDL }: any) => {
  // Marketplace canister interface will be generated here
  const Dataset = IDL.Record({
    id: IDL.Text,
    name: IDL.Text,
    description: IDL.Text,
    category: IDL.Text,
    region: IDL.Text,
    size: IDL.Nat,
    lastUpdate: IDL.Int,
    price: IDL.Nat,
    currency: IDL.Text,
    sampleData: IDL.Text,
    format: IDL.Text,
    updateFrequency: IDL.Text,
    dataPoints: IDL.Nat,
    tags: IDL.Vec(IDL.Text),
    provider: IDL.Principal,
    isActive: IDL.Bool,
  });

  const Purchase = IDL.Record({
    id: IDL.Text,
    datasetId: IDL.Text,
    buyer: IDL.Principal,
    purchaseDate: IDL.Int,
    price: IDL.Nat,
    currency: IDL.Text,
    accessType: IDL.Text,
    apiKey: IDL.Opt(IDL.Text),
    downloadUrl: IDL.Opt(IDL.Text),
    expiryDate: IDL.Opt(IDL.Int),
    status: IDL.Text,
  });

  const ApiKey = IDL.Record({
    id: IDL.Text,
    key: IDL.Text,
    datasetId: IDL.Text,
    owner: IDL.Principal,
    createdAt: IDL.Int,
    lastUsed: IDL.Opt(IDL.Int),
    requestCount: IDL.Nat,
    rateLimit: IDL.Nat,
    isActive: IDL.Bool,
  });

  const User = IDL.Record({
    principal: IDL.Principal,
    email: IDL.Opt(IDL.Text),
    company: IDL.Opt(IDL.Text),
    registeredAt: IDL.Int,
    purchases: IDL.Vec(IDL.Text),
    apiKeys: IDL.Vec(IDL.Text),
    preferences: IDL.Record({
      emailNotifications: IDL.Bool,
      currency: IDL.Text,
      theme: IDL.Text,
    }),
  });

  return IDL.Service({
    init: IDL.Func([], [], []),
    createDataset: IDL.Func([Dataset], [IDL.Variant({ ok: IDL.Text, err: IDL.Text })], []),
    getDataset: IDL.Func([IDL.Text], [IDL.Variant({ ok: Dataset, err: IDL.Text })], ['query']),
    getAllDatasets: IDL.Func([], [IDL.Vec(Dataset)], ['query']),
    searchDatasets: IDL.Func(
      [IDL.Opt(IDL.Text), IDL.Opt(IDL.Text), IDL.Opt(IDL.Text)],
      [IDL.Vec(Dataset)],
      ['query']
    ),
    purchaseDataset: IDL.Func(
      [IDL.Text, IDL.Text, IDL.Text],
      [IDL.Variant({ ok: Purchase, err: IDL.Text })],
      []
    ),
    getUserPurchases: IDL.Func([], [IDL.Vec(Purchase)], []),
    getUserApiKeys: IDL.Func([], [IDL.Vec(ApiKey)], []),
    regenerateApiKey: IDL.Func([IDL.Text], [IDL.Variant({ ok: IDL.Text, err: IDL.Text })], []),
    toggleApiKeyStatus: IDL.Func([IDL.Text], [IDL.Variant({ ok: IDL.Bool, err: IDL.Text })], []),
    registerUser: IDL.Func(
      [IDL.Opt(IDL.Text), IDL.Opt(IDL.Text)],
      [IDL.Variant({ ok: User, err: IDL.Text })],
      []
    ),
    getUserProfile: IDL.Func([], [IDL.Variant({ ok: User, err: IDL.Text })], []),
    addAdmin: IDL.Func([IDL.Principal], [IDL.Variant({ ok: IDL.Null, err: IDL.Text })], []),
    getAdmins: IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),
  });
};

export const init = ({ IDL }: any) => {
  return [];
};