name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main  # Deploy when pushing to main branch
    paths:
      - 'services/ic-proxy/**'
      - 'services/search-proxy/**'
      - '.github/workflows/**'
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies for IC Proxy
      working-directory: ./services/ic-proxy
      run: npm ci --only=production
      
    - name: Install dependencies for Search Proxy
      working-directory: ./services/search-proxy
      run: npm ci --only=production
      
    - name: Create deployment packages
      run: |
        # Create IC Proxy package
        cd services/ic-proxy
        tar -czf ../../ic-proxy-deploy.tar.gz \
          server-fixed.js \
          package.json \
          package-lock.json \
          ecosystem.config.js \
          declarations/ \
          node_modules/
        
        # Create Search Proxy package  
        cd ../search-proxy
        tar -czf ../../search-proxy-deploy.tar.gz \
          server.js \
          package.json \
          package-lock.json \
          ecosystem.config.js \
          node_modules/
        
        cd ../..
        ls -la *.tar.gz
        
    - name: Deploy to Digital Ocean
      env:
        DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
        DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        ADMIN_CANISTER_ID: ${{ secrets.ADMIN_CANISTER_ID }}
        CONSUMER_CANISTER_ID: ${{ secrets.CONSUMER_CANISTER_ID }}
        STORAGE_CANISTER_ID: ${{ secrets.STORAGE_CANISTER_ID }}
      run: |
        # Install sshpass for password authentication
        sudo apt-get update
        sudo apt-get install -y sshpass
        
        echo "🚀 Starting deployment to Digital Ocean..."
        
        # Upload IC Proxy package
        echo "📦 Uploading IC Proxy package..."
        sshpass -p "$DROPLET_PASSWORD" scp -o StrictHostKeyChecking=no \
          ic-proxy-deploy.tar.gz $DROPLET_USER@$DROPLET_HOST:/root/
        
        # Upload Search Proxy package
        echo "📦 Uploading Search Proxy package..."
        sshpass -p "$DROPLET_PASSWORD" scp -o StrictHostKeyChecking=no \
          search-proxy-deploy.tar.gz $DROPLET_USER@$DROPLET_HOST:/root/
        
        # Deploy and restart services
        echo "🔄 Deploying and restarting services..."
        sshpass -p "$DROPLET_PASSWORD" ssh -o StrictHostKeyChecking=no \
          $DROPLET_USER@$DROPLET_HOST << 'EOF'
          
          set -e  # Exit on any error
          
          echo "📁 Extracting IC Proxy..."
          cd /root/ic-proxy
          tar -xzf ../ic-proxy-deploy.tar.gz
          
          echo "📁 Extracting Search Proxy..." 
          cd /root/search-proxy
          tar -xzf ../search-proxy-deploy.tar.gz
          
          echo "🔧 Setting environment variables..."
          export ADMIN_CANISTER_ID="${ADMIN_CANISTER_ID}"
          export CONSUMER_CANISTER_ID="${CONSUMER_CANISTER_ID}" 
          export STORAGE_CANISTER_ID="${STORAGE_CANISTER_ID}"
          
          echo "🔄 Restarting IC Proxy..."
          pm2 restart ic-proxy --update-env
          
          echo "🔄 Restarting Search Proxy..."
          pm2 restart search-proxy --update-env
          
          echo "💾 Saving PM2 configuration..."
          pm2 save --force
          
          echo "🩺 Health check..."
          sleep 5
          pm2 status
          
          # Test endpoints
          echo "🧪 Testing IC Proxy health..."
          curl -f http://localhost:3001/api/health || echo "❌ IC Proxy health check failed"
          
          echo "🧪 Testing Search Proxy health..."
          curl -f http://localhost:3002/api/health || echo "❌ Search Proxy health check failed"
          
          echo "✅ Deployment completed successfully!"
          
        EOF
        
    - name: Verify deployment
      env:
        DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
        DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
      run: |
        echo "🔍 Verifying external endpoints..."
        
        # Test public HTTPS endpoints
        curl -f https://ic-proxy.rhinospider.com/api/health
        echo "✅ IC Proxy public endpoint OK"
        
        curl -f https://search-proxy.rhinospider.com/api/health  
        echo "✅ Search Proxy public endpoint OK"
        
        echo "🎉 All deployments verified successfully!"
        
    - name: Commit deployment info
      env:
        DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
        DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
      run: |
        # Update git repo on droplet with deployment info
        sshpass -p "$DROPLET_PASSWORD" ssh -o StrictHostKeyChecking=no \
          $DROPLET_USER@$DROPLET_HOST << 'EOF'
          
          cd /root/ic-proxy
          git add .
          git commit -m "Auto-deployment from GitHub Actions - $(date)" || echo "No changes to commit"
          
        EOF
        
        echo "📝 Deployment logged in remote git repository"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment to Digital Ocean completed successfully!"
          echo "🔗 IC Proxy: https://ic-proxy.rhinospider.com/api/health"
          echo "🔗 Search Proxy: https://search-proxy.rhinospider.com/api/health"
        else
          echo "❌ Deployment to Digital Ocean failed!"
          echo "Please check the workflow logs for details."
          exit 1
        fi