type UserRole = 
 variant {
   Admin;
   Operator;
   SuperAdmin;
 };
type User = 
 record {
   addedAt: Time;
   addedBy: principal;
   "principal": principal;
   role: UserRole;
 };
type Time = int;
type TaskConfig = 
 record {
   maxBandwidthPerDay: nat;
   scanInterval: nat;
   targetSites: vec text;
   topics: vec text;
 };
type Task = 
 record {
   assignedTo: opt principal;
   createdAt: int;
   id: text;
   priority: nat;
   status: text;
   topic: text;
   url: text;
 };
type ScrapingTopic = 
 record {
   active: bool;
   createdAt: int;
   description: text;
   extractionRules:
    record {
      customPrompt: opt text;
      fields: vec ScrapingField;
    };
   id: text;
   name: text;
   rateLimit: opt record {
                    maxConcurrent: nat;
                    requestsPerHour: nat;
                  };
   urlPatterns: vec text;
   validation: opt record {
                     aiValidation: opt text;
                     rules: vec text;
                   };
 };
type ScrapingField__1 = 
 record {
   aiPrompt: text;
   description: opt text;
   example: opt text;
   fieldType: text;
   name: text;
   required: bool;
 };
type ScrapingField = 
 record {
   aiPrompt: text;
   description: opt text;
   example: opt text;
   fieldType: text;
   name: text;
   required: bool;
 };
type ScrapedData = 
 record {
   client_id: principal;
   content: text;
   id: text;
   source: text;
   timestamp: int;
   topic: text;
   url: text;
 };
type Result_5 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_4 = 
 variant {
   err: text;
   ok: AIConfig;
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec ScrapedData;
 };
type Result_2 = 
 variant {
   err: text;
   ok: record {data: vec record {
                           text;
                           text;
                         };};
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: ScrapingTopic;
 };
type CostLimits = 
 record {
   dailyUSD: nat;
   maxConcurrent: nat;
   monthlyUSD: nat;
 };
type AIConfig = 
 record {
   apiKey: text;
   costLimits: CostLimits;
   model: text;
 };
service : {
  addTasks: (vec Task) -> (Result_5);
  addUser: (principal, UserRole) -> (Result_1);
  clearAllData: () -> (text);
  createTopic: (ScrapingTopic) -> (Result);
  deleteTopic: (text) -> (Result_1);
  getAIConfig: () -> (Result_4);
  getConfig: () -> (TaskConfig) query;
  getScrapedData: (opt text) -> (Result_3);
  getTasks: (nat) -> (vec Task);
  getTopics: () -> (vec ScrapingTopic) query;
  getUsers: () -> (vec User);
  removeUser: (principal) -> (Result_1);
  testExtraction:
   (record {
      extraction_rules:
       record {
         custom_prompt: opt text;
         fields: vec ScrapingField__1;
       };
      url: text;
    }) -> (Result_2);
  updateAIConfig: (AIConfig) -> (Result_1);
  updateConfig: (TaskConfig) -> (Result_1);
  updateTaskStatus: (text, text) -> (Result_1);
  updateTopic: (text, ScrapingTopic) -> (Result);
}
