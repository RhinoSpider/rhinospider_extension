type Result_3 = 
 variant {
   err: text;
   ok: vec Client;
 };
type Result_2 = 
 variant {
   err: text;
   ok: ClientStats;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Client;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type ClientStats = 
 record {
   bytesDownloaded: nat;
   bytesUploaded: nat;
   lastUpdate: int;
 };
type Client = 
 record {
   bandwidthLimit: nat;
   id: text;
   isActive: bool;
   lastActive: int;
   "principal": principal;
   registeredAt: int;
 };
service : {
  deactivateClient: (principal) -> (Result);
  getAllClients: () -> (Result_3) query;
  getClientStats: () -> (Result_2) query;
  init: () -> ();
  isAuthorized: (principal) -> (bool) query;
  registerClient: (nat) -> (Result_1);
  updateBandwidthLimit: (principal, nat) -> (Result);
  updateStats: (nat, nat) -> (Result);
}
