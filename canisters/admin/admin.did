type ExtractionField = record {
    name: text;
    fieldType: text;
    required: bool;
    aiPrompt: text;
};

type ExtractionRules = record {
    fields: vec ExtractionField;
    customPrompt: opt text;
};

type Request = record {
    url: text;
    content_id: text;
    extraction_rules: ExtractionRules;
    topic_id: text;
};

type Task = record {
    id: text;
    url: text;
    topic: text;
    priority: nat;
    created_at: int;
    assigned_to: opt principal;
    status: text;
};

type TaskConfig = record {
    topics: vec text;
    target_sites: vec text;
    scan_interval: nat;
    max_bandwidth_per_day: nat;
};

type Result = variant {
    ok: text;
    err: text;
};

type Result_1 = variant {
    ok;
    err: text;
};

type CostLimits = record {
    dailyUSD: nat;
    monthlyUSD: nat;
    maxConcurrent: nat;
};

type AIConfig = record {
    apiKey: text;
    model: text;
    costLimits: CostLimits;
};

type Result_2 = variant {
    ok: AIConfig;
    err: text;
};

type ScrapingField = record {
    name: text;
    description: opt text;
    example: opt text;
    aiPrompt: text;
    required: bool;
    fieldType: text;
};

type Validation = opt record {
    rules: vec text;
    aiValidation: opt text;
};

type RateLimit = opt record {
    requestsPerHour: nat;
    maxConcurrent: nat;
};

type CreateTopicRequest = record {
    id: text;
    name: text;
    description: text;
    urlPatterns: vec text;
    active: bool;
    extractionRules: ExtractionRules;
    validation: Validation;
    rateLimit: RateLimit;
};

type ScrapingTopic = record {
    id: text;
    name: text;
    description: text;
    urlPatterns: vec text;
    active: bool;
    extractionRules: ExtractionRules;
    validation: Validation;
    rateLimit: RateLimit;
    createdAt: int;
};

type ScrapedData = record {
    id: text;
    url: text;
    topic: text;
    source: text;
    content: text;
    timestamp: int;
    client_id: principal;
};

type Result_3 = variant {
    ok: vec ScrapedData;
    err: text;
};

type Result_Topic = variant {
    ok: ScrapingTopic;
    err: text;
};

type User = record {
    principal: principal;
    role: UserRole;
};

type UserRole = variant {
    admin;
    user;
};

type Result = variant {
    ok;
    err: text;
};

service : {
    // User management
    addUser: (principal, text) -> (Result);
    removeUser: (principal) -> (Result);
    getUsers: () -> (vec User) query;
    hasRole: (principal, UserRole) -> (bool) query;
    
    // Topic management
    createTopic: (ScrapingTopic) -> (Result);
    updateTopic: (text, ScrapingTopic) -> (variant { ok: ScrapingTopic; err: text });
    getTopic: (text) -> (opt ScrapingTopic) query;
    getTopics: () -> (vec ScrapingTopic) query;
    deleteTopic: (text) -> (Result);
    setTopicActive: (text, bool) -> (Result);
    
    // Task management
    addTasks: (vec Task) -> (variant { ok: nat; err: text });
    getTasks: () -> (vec Task) query;
    getTasksByTopic: (text) -> (vec Task) query;
    getTasksByStatus: (text) -> (vec Task) query;
    assignTask: (text, principal) -> (Result);
    updateTaskStatus: (text, text) -> (Result);
    
    // AI configuration
    getAIConfiguration: () -> (AIConfig) query;
    updateAIConfiguration: (AIConfig) -> (Result);
    
    // System
    getCycles: () -> (nat) query;
};
