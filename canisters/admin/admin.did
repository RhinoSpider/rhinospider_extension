type ExtractionField = record {
    name: text;
    fieldType: text;
    required: bool;
    aiPrompt: opt text;
};

type ExtractionRules = record {
    fields: vec ExtractionField;
    customPrompt: opt text;
};

type CostLimits = record {
    maxDailyCost: float64;
    maxMonthlyCost: float64;
    maxConcurrent: nat;
};

type AIConfig = record {
    apiKey: text;
    model: text;
    costLimits: CostLimits;
};

type ActiveHours = record {
    start: nat;
    end: nat;
};

type ScrapingTopic = record {
    id: text;
    name: text;
    description: text;
    urlPatterns: vec text;
    status: text;
    extractionRules: ExtractionRules;
    aiConfig: AIConfig;
    scrapingInterval: nat;
    lastScraped: int;
    activeHours: ActiveHours;
    maxRetries: nat;
    createdAt: int;
};

type ScrapedData = record {
    id: text;
    url: text;
    topic: text;
    content: text;
    source: text;
    timestamp: int;
    client_id: principal;
    status: text;
    scraping_time: int;
};

type CreateTopicRequest = record {
    id: text;
    name: text;
    description: text;
    urlPatterns: vec text;
    status: text;
    extractionRules: ExtractionRules;
    aiConfig: AIConfig;
    scrapingInterval: nat;
    activeHours: ActiveHours;
    maxRetries: nat;
};

type Result = variant {
    ok: text;
    err: text;
};

type Result_1 = variant {
    ok;
    err: text;
};

type Result_2 = variant {
    ok: AIConfig;
    err: text;
};

type Result_3 = variant {
    ok: ScrapingTopic;
    err: text;
};

type Result_4 = variant {
    ok: vec ScrapingTopic;
    err: text;
};

type Result_5 = variant {
    ok: vec ScrapedData;
    err: text;
};

type UserRole = variant {
    Admin;
    User;
    None;
};

type User = record {
    role: UserRole;
};

service : {
    add_user: (principal, UserRole) -> (Result_1);
    createTopic: (CreateTopicRequest) -> (Result_3);
    deleteTopic: (text) -> (Result_1);
    getAIConfig: () -> (Result_2);
    getScrapedData: (vec text) -> (Result_5);
    getTopics: () -> (Result_4) update;
    get_users: () -> (Result_4);
    remove_user: (principal) -> (Result_1);
    setTopicActive: (text, bool) -> (Result_1);
    testExtraction: (text, text) -> (Result);
    updateAIConfig: (AIConfig) -> (Result_2);
    updateTopic: (text, CreateTopicRequest) -> (Result_3);
};
