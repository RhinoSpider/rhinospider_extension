type GlobalAIConfig = record {
    enabled: bool;
    provider: text;
    apiKey: opt text;
    model: text;
    maxTokensPerRequest: nat;
    features: record {
        summarization: bool;
        categorization: bool;
        sentimentAnalysis: bool;
        keywordExtraction: bool;
    };
};

type ScrapingTopic = record {
    id: text;
    name: text;
    description: text;
    status: text;
    
    searchQueries: vec text;
    preferredDomains: opt vec text;
    excludeDomains: opt vec text;
    requiredKeywords: vec text;
    excludeKeywords: opt vec text;
    
    contentSelectors: vec text;
    titleSelectors: opt vec text;
    excludeSelectors: vec text;
    minContentLength: nat;
    maxContentLength: nat;
    
    maxUrlsPerBatch: nat;
    scrapingInterval: nat;
    priority: nat;
    
    createdAt: int;
    lastScraped: int;
    totalUrlsScraped: nat;
};

type ScrapedData = record {
    id: text;
    url: text;
    topic: text;
    content: text;
    source: text;
    timestamp: int;
    client_id: principal;
    status: text;
    scraping_time: int;
};

type NodeCharacteristics = record {
    ipAddress: text;
    region: text;
    percentageNodes: opt nat;
    randomizationMode: opt text;
};

type UserRole = variant {
    SuperAdmin;
    Admin;
    Operator;
};

type User = record {
    principal: principal;
    role: UserRole;
    addedBy: principal;
    addedAt: int;
};

type Result = variant {
    ok: text;
    err: text;
};

type Result_1 = variant {
    ok;
    err: text;
};

type Result_2 = variant {
    ok: opt GlobalAIConfig;
    err: text;
};

type Result_3 = variant {
    ok: ScrapingTopic;
    err: text;
};

type Result_4 = variant {
    ok: vec ScrapingTopic;
    err: text;
};

type Result_5 = variant {
    ok: vec ScrapedData;
    err: text;
};

type Result_6 = variant {
    ok: vec User;
    err: text;
};

type UpdateTopicRequest = record {
    name: opt text;
    description: opt text;
    status: opt text;
    searchQueries: opt vec text;
    preferredDomains: opt vec text;
    excludeDomains: opt vec text;
    requiredKeywords: opt vec text;
    excludeKeywords: opt vec text;
    contentSelectors: opt vec text;
    titleSelectors: opt vec text;
    excludeSelectors: opt vec text;
    minContentLength: opt nat;
    maxContentLength: opt nat;
    maxUrlsPerBatch: opt nat;
    scrapingInterval: opt nat;
    priority: opt nat;
};

service : {
    add_user: (principal, UserRole) -> (Result_1);
    get_users: () -> (Result_6) query;
    remove_user: (principal) -> (Result_1);
    
    createTopic: (ScrapingTopic) -> (Result_3);
    updateTopic: (text, UpdateTopicRequest) -> (Result_3);
    deleteTopic: (text) -> (Result_1);
    setTopicActive: (text, bool) -> (Result_1);
    getTopics: () -> (Result_4) query;
    getAllTopics: () -> (vec ScrapingTopic) query;
    getTopics_with_caller: (principal) -> (Result_4);
    getAssignedTopics: (NodeCharacteristics) -> (Result_4) query;
    
    setGlobalAIConfig: (opt GlobalAIConfig) -> (Result_1);
    getGlobalAIConfig: () -> (Result_2) query;
    
    getScrapedData: (vec text) -> (Result_5);
    testExtraction: (text, text) -> (Result);
    
    registerNode: (principal, NodeCharacteristics) -> (Result_1);
    getRegisteredNodes: () -> (Result_4) query;
};