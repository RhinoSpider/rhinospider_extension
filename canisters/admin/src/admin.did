type ScrapingField = record {
  name: text;
  description: text;
  ai_prompt: text;
  required: bool;
  field_type: text;
  example: opt text;
};

type ScrapingTopic = record {
  id: text;
  name: text;
  description: text;
  url_patterns: vec text;
  active: bool;
  extraction_rules: record {
    fields: vec ScrapingField;
    custom_prompt: opt text;
  };
  validation: opt record {
    rules: vec text;
    ai_validation: opt text;
  };
  rate_limit: opt record {
    requests_per_hour: nat32;
    max_concurrent: nat32;
  };
};

type AIConfig = record {
  provider: text;
  api_key: text; // Encrypted
  model: text;
  max_tokens: nat32;
  temperature: float64;
  cost_limits: record {
    daily_usd: float64;
    monthly_usd: float64;
  };
};

type ScrapedData = record {
  id: text;
  topic_id: text;
  url: text;
  timestamp: nat64;
  extracted_by: text;
  data: record {
    text;
    text;
  };
  quality: record {
    score: float64;
    issues: opt vec text;
  };
};

type ExtensionUser = record {
  principal_id: text;
  status: text;
  last_active: nat64;
  stats: record {
    pages_scraped: nat32;
    data_points: nat32;
    quality_score: float64;
  };
  rate_limit: record {
    requests_per_hour: nat32;
    max_concurrent: nat32;
  };
};

service : {
  // Topic Management
  get_topics : () -> (vec ScrapingTopic) query;
  create_topic : (ScrapingTopic) -> (ScrapingTopic);
  update_topic : (text, ScrapingTopic) -> (ScrapingTopic);
  delete_topic : (text) -> ();
  
  // AI Configuration
  get_ai_config : () -> (AIConfig) query;
  update_ai_config : (AIConfig) -> (AIConfig);
  
  // Scraped Data Management
  get_scraped_data : (opt text) -> (vec ScrapedData) query; // Optional topic ID filter
  delete_scraped_data : (text) -> ();
  
  // User Management
  get_users : () -> (vec ExtensionUser) query;
  update_user : (text, ExtensionUser) -> (ExtensionUser);
  block_user : (text) -> ();
}
