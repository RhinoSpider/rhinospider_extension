type ScrapedData = record {
    id: text;
    url: text;
    topic: text;
    source: text;
    content: text;
    timestamp: int;
    clientId: principal;
};

type ScrapedContent = record {
    id: text;
    source: text;
    url: text;
    title: text;
    author: text;
    publishDate: int;
    updateDate: int;
    content: text;
    summary: text;
    topics: vec text;
    engagement: record {
        stars: opt nat;
        reactions: opt nat;
        claps: opt nat;
        comments: nat;
    };
    metadata: record {
        readingTime: opt nat;
        language: opt text;
        license: opt text;
        techStack: vec text;
    };
    aiAnalysis: record {
        relevanceScore: nat;
        keyPoints: vec text;
        codeSnippets: vec record {
            language: text;
            code: text;
        };
    };
};

type DataBatch = record {
    items: vec ScrapedData;
    clientId: principal;
    batchId: text;
};

type StorageStats = record {
    totalItems: nat;
    totalBytes: nat;
    lastUpdate: int;
};

type Result = variant {
    ok: nat;
    err: text;
};

service : {
    // Legacy endpoints
    storeBatch: (DataBatch) -> (Result);
    getByTopic: (text) -> (vec ScrapedData) query;
    getBySource: (text) -> (vec ScrapedData) query;
    getStats: () -> (StorageStats) query;
    getCycles: () -> (nat) query;
    
    // New endpoints
    storeContent: (ScrapedContent) -> (Result);
    getContentByTopic: (text, nat) -> (vec ScrapedContent) query;
    getDailyStats: () -> (StorageStats) query;
};
