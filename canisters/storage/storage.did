type ScrapedData = record {
    id: text;
    url: text;
    topic: text;
    source: text;
    content: text;
    timestamp: int;
    clientId: principal;
};

type ScrapedContent = record {
    id: text;
    source: text;
    url: text;
    title: text;
    author: text;
    publishDate: int;
    updateDate: int;
    content: text;
    summary: text;
    topics: vec text;
    engagement: record {
        stars: opt nat;
        reactions: opt nat;
        claps: opt nat;
        comments: nat;
    };
    metadata: record {
        readingTime: opt nat;
        language: opt text;
        license: opt text;
        techStack: vec text;
    };
    aiAnalysis: record {
        relevanceScore: nat;
        keyPoints: vec text;
        codeSnippets: vec record {
            language: text;
            code: text;
        };
    };
};

type DataBatch = record {
    items: vec ScrapedData;
    clientId: principal;
    batchId: text;
};

type StorageStats = record {
    totalItems: nat;
    totalBytes: nat;
    lastUpdate: int;
};

type Result = variant {
    ok: nat;
    err: text;
};

type ExtractionField = record {
    fieldName: text;
    fieldType: text;
    isRequired: bool;
    aiPrompt: text;
};

type ExtractionRules = record {
    fields: vec ExtractionField;
    customPrompt: opt text;
};

type ExtractionResult = record {
    data: vec record { text; text };
};

type ExtractionRequest = record {
    url: text;
    extractionRules: ExtractionRules;
};

type LocalExtractionRequest = record {
    htmlContent: text;
    extractionRules: ExtractionRules;
};

type ScrapingTopic = record {
    id: text;
    name: text;
    description: opt text;
    urlPatterns: vec text;
    extractionRules: opt ExtractionRules;
    createdAt: int;
    updatedAt: int;
    active: bool;
};

service : {
    // Legacy endpoints
    storeBatch: (DataBatch) -> (Result);
    getByTopic: (text) -> (vec ScrapedData) query;
    getBySource: (text) -> (vec ScrapedData) query;
    getStats: () -> (StorageStats) query;
    getCycles: () -> (nat) query;
    
    // New endpoints
    storeContent: (ScrapedContent) -> (Result);
    getContentByTopic: (text, nat) -> (vec ScrapedContent) query;
    getDailyStats: () -> (StorageStats) query;
    testExtraction: (ExtractionRequest) -> (variant { ok: ExtractionResult; err: text });
    testExtractionLocal: (LocalExtractionRequest) -> (variant { ok: ExtractionResult; err: text });
    createTopic: (ScrapingTopic) -> (Result);
    updateTopic: (ScrapingTopic) -> (Result);
    getTopic: (text) -> (opt ScrapingTopic) query;
    getTopics: () -> (vec ScrapingTopic) query;
    deleteTopic: (text) -> (Result);
    setTopicActive: (text, bool) -> (Result);
};
